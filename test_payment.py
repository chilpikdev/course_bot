# test_payments.py
# –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è Telegram –±–æ—Ç–∞

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'course_bot_project.settings')
django.setup()

from django.conf import settings
from django.core.files.base import ContentFile

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    try:
        from bot.payment_handlers import (
            setup_payment_handlers, handle_photo_receipt, 
            handle_document_receipt, create_payment_record,
            send_admin_notification, send_payment_result_to_user
        )
        print("   ‚úÖ payment_handlers")
        
        from payments.models import Payment, PaymentNotification
        print("   ‚úÖ Payment models")
        
        from courses.models import PaymentMethod
        print("   ‚úÖ PaymentMethod model")
        
        from bot.bot_manager import BotManager
        print("   ‚úÖ BotManager")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_payment_methods():
    """–¢–µ—Å—Ç —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã...")
    
    try:
        from courses.models import PaymentMethod
        
        methods = PaymentMethod.objects.filter(is_active=True)
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {methods.count()} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã")
        
        for method in methods:
            print(f"      - {method.name}: {method.card_number}")
        
        if methods.count() == 0:
            print("   ‚ö†Ô∏è  –ù–µ—Ç —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python create_test_data.py")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_payment_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    try:
        from bot.models import TelegramUser
        from courses.models import Course, PaymentMethod
        from bot.payment_handlers import create_payment_record
        
        # –ë–µ—Ä–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = TelegramUser.objects.first()
        course = Course.objects.filter(is_active=True).first()
        method = PaymentMethod.objects.filter(is_active=True).first()
        
        if not all([user, course, method]):
            print("   ‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python create_test_data.py")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —á–µ–∫–∞
        test_image_content = b"fake image content for testing"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment = create_payment_record(
            user=user,
            course=course,
            payment_method=method,
            file_content=test_image_content,
            file_name="test_receipt.jpg",
            user_comment="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
        )
        
        if payment:
            print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: #{payment.id}")
            print(f"      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user.full_name}")
            print(f"      –ö—É—Ä—Å: {payment.course.name}")
            print(f"      –°—É–º–º–∞: {payment.amount} —Ä—É–±")
            print(f"      –°—Ç–∞—Ç—É—Å: {payment.get_status_display()}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            payment.delete()
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω")
            
            return True
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂")
            return False
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

def test_bot_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...")
    
    try:
        from bot.bot_manager import BotManager
        from bot.bot_handlers_simple import setup_bot_handlers
        from bot.payment_handlers import setup_payment_handlers
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = BotManager(settings.TELEGRAM_BOT_TOKEN)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_bot_handlers(bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
        payment_handlers = [
            'buy_', 'payment_method_', 'confirm_payment_', 'cancel_payment'
        ]
        
        for handler in payment_handlers:
            if handler in bot.handlers['callback']:
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"   ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if bot.handlers['photo'] and bot.handlers['document']:
            print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            print("   ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

def test_admin_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∞"""
    print("\nüë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not settings.TELEGRAM_BOT_TOKEN:
        print("   ‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    if settings.TELEGRAM_BOT_TOKEN.startswith('1234567890'):
        print("   ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        return False
    
    print("   ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π chat_id
    admin_chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', None)
    if admin_chat_id:
        print(f"   ‚úÖ Admin chat ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {admin_chat_id}")
    else:
        print("   ‚ö†Ô∏è  TELEGRAM_ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)")
        print("      –î–æ–±–∞–≤—å—Ç–µ –≤ .env: TELEGRAM_ADMIN_CHAT_ID=–≤–∞—à_chat_id")
        print("      –£–∑–Ω–∞—Ç—å chat_id –º–æ–∂–Ω–æ —É –±–æ—Ç–∞ @userinfobot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    media_root = settings.MEDIA_ROOT
    if os.path.exists(media_root):
        print(f"   ‚úÖ –ú–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {media_root}")
    else:
        print(f"   ‚ö†Ô∏è  –ú–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {media_root}")
    
    return True

def test_database_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from payments.models import Payment, PaymentNotification
        from courses.models import PaymentMethod
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = [
            (Payment, "payments_payment"),
            (PaymentNotification, "payments_paymentnotification"), 
            (PaymentMethod, "courses_paymentmethod")
        ]
        
        for model, table_name in tables_to_check:
            try:
                count = model.objects.count()
                print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return False

def test_telegram_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
    
    try:
        from bot.telegram_api import TelegramAPI
        
        api = TelegramAPI(settings.TELEGRAM_BOT_TOKEN)
        bot_info = api.get_me()
        
        print(f"   ‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username')}")
        print(f"      –ò–º—è: {bot_info.get('first_name')}")
        print(f"      ID: {bot_info.get('id')}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def create_test_payment_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from courses.models import PaymentMethod
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        if PaymentMethod.objects.count() == 0:
            print("   üì± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã...")
            
            methods_data = [
                {
                    'name': '–°–±–µ—Ä–±–∞–Ω–∫',
                    'card_number': '2202 2023 1234 5678',
                    'cardholder_name': 'IVAN PETROV',
                    'bank_name': '–°–±–µ—Ä–±–∞–Ω–∫',
                    'instructions': '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.',
                    'order': 1
                },
                {
                    'name': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
                    'card_number': '5536 9137 8765 4321', 
                    'cardholder_name': 'IVAN PETROV',
                    'bank_name': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫',
                    'instructions': '–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.',
                    'order': 2
                }
            ]
            
            for method_data in methods_data:
                method, created = PaymentMethod.objects.get_or_create(
                    name=method_data['name'],
                    defaults=method_data
                )
                if created:
                    print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method.name}")
        
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–õ–ê–¢–ï–ñ–ï–ô")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_database_structure,
        test_telegram_connection,
        create_test_payment_data,
        test_payment_methods,
        test_payment_creation,
        test_bot_handlers,
        test_admin_settings
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≥–æ—Ç–æ–≤–∞!")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("python run_simple_bot.py")
        print("\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å TELEGRAM_ADMIN_CHAT_ID –≤ .env")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É –∫—É—Ä—Å–∞ –≤ –±–æ—Ç–µ")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ")
        return True
    else:
        print(f"\n‚ùå –ï—Å—Ç—å {failed} –ø—Ä–æ–±–ª–µ–º(—ã). –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py migrate")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ: python create_test_data.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_ADMIN_CHAT_ID")
        return False

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)