# courses/models.py

from django.db import models
from django.core.validators import MinValueValidator
from decimal import Decimal

class Course(models.Model):
    """–ú–æ–¥–µ–ª—å –∫—É—Ä—Å–∞"""
    
    name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞"
    )
    description = models.TextField(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞",
        help_text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    short_description = models.CharField(
        max_length=300,
        blank=True,
        verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        help_text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"
    )
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        validators=[MinValueValidator(Decimal('0.01'))],
        verbose_name="–¶–µ–Ω–∞",
        help_text="–¶–µ–Ω–∞ –∫—É—Ä—Å–∞ –≤ —Ä—É–±–ª—è—Ö"
    )
    old_price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True,
        validators=[MinValueValidator(Decimal('0.01'))],
        verbose_name="–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞",
        help_text="–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–∫–∏–¥–∫–∏"
    )
    group_link = models.URLField(
        verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É",
        help_text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ Telegram –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª"
    )
    preview_image = models.ImageField(
        upload_to='courses/images/',
        blank=True,
        null=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω",
        help_text="–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫—É—Ä—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
    )
    is_featured = models.BooleanField(
        default=False,
        verbose_name="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π",
        help_text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫—É—Ä—Å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"
    )
    max_students = models.PositiveIntegerField(
        blank=True,
        null=True,
        verbose_name="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
        help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ)"
    )
    order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–ö—É—Ä—Å"
        verbose_name_plural = "–ö—É—Ä—Å—ã"
        ordering = ['order', 'name']

    def __str__(self):
        return self.name

    @property
    def current_students_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        return self.payments.filter(status='approved').count()

    @property
    def is_available(self):
        """–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫—É—Ä—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        if not self.is_active:
            return False
        if self.max_students and self.current_students_count >= self.max_students:
            return False
        return True

    @property
    def discount_percentage(self):
        """–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"""
        if self.old_price and self.old_price > self.price:
            return int(((self.old_price - self.price) / self.old_price) * 100)
        return 0

    def get_display_description(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return self.short_description if self.short_description else self.description[:300] + "..." if len(self.description) > 300 else self.description

class PaymentMethod(models.Model):
    """–ú–æ–¥–µ–ª—å —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    
    name = models.CharField(
        max_length=100,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"
    )
    card_number = models.CharField(
        max_length=20,
        blank=True,
        verbose_name="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
    )
    cardholder_name = models.CharField(
        max_length=200,
        blank=True,
        verbose_name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å",
        help_text="–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã"
    )
    bank_name = models.CharField(
        max_length=100,
        blank=True,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞"
    )
    instructions = models.TextField(
        blank=True,
        verbose_name="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω"
    )
    order = models.PositiveIntegerField(
        default=0,
        verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
        verbose_name_plural = "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã"
        ordering = ['order', 'name']

    def __str__(self):
        return self.name

    def get_payment_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        info = f"üí≥ {self.name}\n"
        if self.card_number:
            info += f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {self.card_number}\n"
        if self.cardholder_name:
            info += f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {self.cardholder_name}\n"
        if self.bank_name:
            info += f"–ë–∞–Ω–∫: {self.bank_name}\n"
        if self.instructions:
            info += f"\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n{self.instructions}"
        return info