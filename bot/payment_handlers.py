# payment_handlers.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è Telegram –±–æ—Ç–∞

import os
import logging
from datetime import datetime
from django.core.files.base import ContentFile
from django.conf import settings
from bot.bot_manager import BotManager, BotStates, MessageContext, KeyboardBuilder
from bot.models import TelegramUser
from courses.models import Course, PaymentMethod
from payments.models import Payment, PaymentNotification
from django.utils import timezone


logger = logging.getLogger(__name__)

def setup_payment_handlers(bot: BotManager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    bot.add_callback_handler('buy_', handle_buy_course)
    bot.add_callback_handler('payment_method_', handle_payment_method_selection)
    bot.add_callback_handler('confirm_payment_', handle_confirm_payment)
    bot.add_callback_handler('cancel_payment', handle_cancel_payment)
    
    logger.info("Payment handlers configured successfully")

def handle_buy_course(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞"""
    ctx = MessageContext(bot, update)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞
        course_id = int(ctx.callback_data.split('_')[1])
        course = Course.objects.get(id=course_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞
        if not course.is_available:
            ctx.edit_message(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –∫—É—Ä—Å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                KeyboardBuilder.inline_keyboard([[
                    {'text': "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", 'callback_data': "back_to_courses"}
                ]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫—É—Ä—Å —Ä–∞–Ω–µ–µ
        telegram_user = TelegramUser.objects.get(chat_id=ctx.chat_id)
        existing_payment = Payment.objects.filter(
            user=telegram_user, 
            course=course,
            status__in=['approved', 'pending']
        ).first()
        
        if existing_payment:
            if existing_payment.status == 'approved':
                ctx.edit_message(
                    f"‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫—É—Ä—Å \"{course.name}\".\n\n"
                    f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: {course.group_link}",
                    KeyboardBuilder.inline_keyboard([[
                        {'text': "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", 'callback_data': "back_to_courses"}
                    ]])
                )
            else:
                ctx.edit_message(
                    f"‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—É—Ä—Å–∞ \"{course.name}\".\n"
                    f"–°—Ç–∞—Ç—É—Å: {existing_payment.get_status_display()}\n\n"
                    f"–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    KeyboardBuilder.inline_keyboard([[
                        {'text': "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", 'callback_data': "back_to_courses"}
                    ]])
                )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        payment_methods = PaymentMethod.objects.filter(is_active=True).order_by('order')
        
        if not payment_methods:
            ctx.edit_message(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                KeyboardBuilder.inline_keyboard([[
                    {'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥", 'callback_data': f"course_{course_id}"}
                ]])
            )
            return
        
        if payment_methods.count() == 1:
            fake_update = update.copy()
            fake_update['callback_query'] = fake_update.get('callback_query', {})
            fake_update['callback_query']['data'] = f"payment_method_{course_id}_{payment_methods.first().id}"
            handle_payment_method_selection(bot, fake_update)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        message = f"üí≥ **–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞: {course.name}**\n\n"
        message += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: **{course.price} —Ä—É–±**\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        # –ö–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        buttons = []
        for method in payment_methods:
            buttons.append([{
                'text': f"üí≥ {method.name}",
                'callback_data': f"payment_method_{course_id}_{method.id}"
            }])
        
        buttons.append([{
            'text': "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            'callback_data': f"course_{course_id}"
        }])
        
        keyboard = KeyboardBuilder.inline_keyboard(buttons)
        
        ctx.edit_message(message, keyboard)
        ctx.set_state(BotStates.PAYMENT_METHOD)
        ctx.set_data('buying_course_id', course_id)
        
    except Exception as e:
        logger.error(f"Error in buy course: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏.")

def handle_payment_method_selection(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    ctx = MessageContext(bot, update)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = ctx.callback_data.split('_')
        course_id = int(parts[2])
        method_id = int(parts[3])
        
        course = Course.objects.get(id=course_id)
        payment_method = PaymentMethod.objects.get(id=method_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        message = f"üí≥ **–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞: {course.name}**\n\n"
        message += f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{course.price} —Ä—É–±**\n\n"
        message += f"üìã **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
        message += payment_method.get_payment_info()
        message += f"\n\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n"
        message += f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ **{course.price} —Ä—É–±**\n"
        message += f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
        message += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É\n\n"
        message += f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç:"
        
        buttons = [
            [{'text': "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É", 'callback_data': "cancel_payment"}],
            [{'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥", 'callback_data': f"course_{course_id}"}]
        ]
        
        keyboard = KeyboardBuilder.inline_keyboard(buttons)
        
        ctx.edit_message(message, keyboard)
        ctx.set_state(BotStates.WAITING_RECEIPT)
        ctx.set_data('buying_course_id', course_id)
        ctx.set_data('payment_method_id', method_id)
        
    except Exception as e:
        logger.error(f"Error in payment method selection: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.")

def handle_photo_receipt(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    ctx = MessageContext(bot, update)
    
    if ctx.user_state != BotStates.WAITING_RECEIPT:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
        course_id = ctx.user_data.get('buying_course_id')
        method_id = ctx.user_data.get('payment_method_id')
        
        if not course_id or not method_id:
            ctx.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        course = Course.objects.get(id=course_id)
        payment_method = PaymentMethod.objects.get(id=method_id)
        telegram_user = TelegramUser.objects.get(chat_id=ctx.chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photos = ctx.message.get('photo', [])
        if not photos:
            ctx.reply("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = max(photos, key=lambda p: p.get('file_size', 0))
        file_id = photo['file_id']
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = bot.download_file(file_id)
        if not file_content:
            ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = create_payment_record(
            telegram_user, course, payment_method, 
            file_content, 'photo.jpg', ctx.message.get('caption', '')
        )
        
        if payment:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            send_admin_notification(bot, payment)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success_message = (
                f"‚úÖ **–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω!**\n\n"
                f"üìö –ö—É—Ä—Å: {course.name}\n"
                f"üí∞ –°—É–º–º–∞: {course.price} —Ä—É–±\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method.name}\n\n"
                f"‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                f"–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 —á–∞—Å–æ–≤.\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∫—É—Ä—Å–∞."
            )
            
            keyboard = KeyboardBuilder.inline_keyboard([[
                {'text': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': "back_to_menu"}
            ]])
            
            ctx.reply(success_message, keyboard, parse_mode='Markdown')
            ctx.set_state(BotStates.MAIN_MENU)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ctx.user_data.pop('buying_course_id', None)
            ctx.user_data.pop('payment_method_id', None)
        else:
            ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    except Exception as e:
        logger.error(f"Error processing photo receipt: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞.")

def handle_document_receipt(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ–∫–∞"""
    ctx = MessageContext(bot, update)
    
    if ctx.user_state != BotStates.WAITING_RECEIPT:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
        course_id = ctx.user_data.get('buying_course_id')
        method_id = ctx.user_data.get('payment_method_id')
        
        if not course_id or not method_id:
            ctx.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        course = Course.objects.get(id=course_id)
        payment_method = PaymentMethod.objects.get(id=method_id)
        telegram_user = TelegramUser.objects.get(chat_id=ctx.chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = ctx.message.get('document')
        if not document:
            ctx.reply("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_name = document.get('file_name', 'receipt')
        mime_type = document.get('mime_type', '')
        file_size = document.get('file_size', 0)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10 –ú–ë)
        if file_size > 10 * 1024 * 1024:
            ctx.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        allowed_types = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg']
        if mime_type not in allowed_types:
            ctx.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF, JPG –∏–ª–∏ PNG.")
            return
        
        file_id = document['file_id']
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = bot.download_file(file_id)
        if not file_content:
            ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = create_payment_record(
            telegram_user, course, payment_method, 
            file_content, file_name, ctx.message.get('caption', '')
        )
        
        if payment:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            send_admin_notification(bot, payment)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success_message = (
                f"‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω!**\n\n"
                f"üìö –ö—É—Ä—Å: {course.name}\n"
                f"üí∞ –°—É–º–º–∞: {course.price} —Ä—É–±\n"
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method.name}\n"
                f"üìÑ –§–∞–π–ª: {file_name}\n\n"
                f"‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                f"–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 —á–∞—Å–æ–≤.\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∫—É—Ä—Å–∞."
            )
            
            keyboard = KeyboardBuilder.inline_keyboard([[
                {'text': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': "back_to_menu"}
            ]])
            
            ctx.reply(success_message, keyboard, parse_mode='Markdown')
            ctx.set_state(BotStates.MAIN_MENU)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ctx.user_data.pop('buying_course_id', None)
            ctx.user_data.pop('payment_method_id', None)
        else:
            ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
    except Exception as e:
        logger.error(f"Error processing document receipt: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

def handle_cancel_payment(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
    ctx = MessageContext(bot, update)
    
    ctx.edit_message(
        "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ.",
        KeyboardBuilder.inline_keyboard([[
            {'text': "üìö –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", 'callback_data': "back_to_courses"},
            {'text': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': "back_to_menu"}
        ]])
    )
    
    ctx.set_state(BotStates.MAIN_MENU)
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    ctx.user_data.pop('buying_course_id', None)
    ctx.user_data.pop('payment_method_id', None)

def create_payment_record(user: TelegramUser, course: Course, payment_method: PaymentMethod, 
                         file_content: bytes, file_name: str, user_comment: str = '') -> Payment:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        file_extension = os.path.splitext(file_name)[1] or '.jpg'
        unique_filename = f"receipt_{user.chat_id}_{timestamp}{file_extension}"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Django
        django_file = ContentFile(file_content, name=unique_filename)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment.objects.create(
            user=user,
            course=course,
            payment_method=payment_method,
            amount=course.price,
            receipt_file=django_file,
            user_comment=user_comment,
            status='pending'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        PaymentNotification.objects.create(payment=payment)
        
        logger.info(f"Payment created: {payment.id} for user {user.chat_id}")
        return payment
        
    except Exception as e:
        logger.error(f"Error creating payment record: {e}")
        return None

def send_admin_notification(bot: BotManager, payment: Payment):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ .env)
        admin_chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', None)
        
        if not admin_chat_id:
            logger.warning("TELEGRAM_ADMIN_CHAT_ID not configured")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        message = f"üîî **–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!**\n\n"
        message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user.full_name}\n"
        message += f"üì± Telegram: @{payment.user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {payment.user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        message += f"üÜî Chat ID: `{payment.user.chat_id}`\n\n"
        message += f"üìö –ö—É—Ä—Å: {payment.course.name}\n"
        message += f"üí∞ –°—É–º–º–∞: {payment.amount} —Ä—É–±\n"
        message += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment.payment_method.name}\n\n"
        
        if payment.user_comment:
            message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {payment.user_comment}\n\n"
        
        message += f"üïê –í—Ä–µ–º—è: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        message += f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –∞–¥–º–∏–Ω–∫–µ: /admin/payments/payment/{payment.id}/change/"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        buttons = [
            [
                {'text': "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 'callback_data': f"admin_approve_{payment.id}"},
                {'text': "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 'callback_data': f"admin_reject_{payment.id}"}
            ],
            [{'text': "üìÑ –û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ", 'callback_data': f"admin_open_{payment.id}"}]
        ]
        
        keyboard = KeyboardBuilder.inline_keyboard(buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(admin_chat_id, message, keyboard, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ–∫–∞
        if payment.receipt_file:
            try:
                with open(payment.receipt_file.path, 'rb') as f:
                    if payment.is_image:
                        bot.send_photo(
                            admin_chat_id, 
                            f, 
                            caption=f"–ß–µ–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ #{payment.id}"
                        )
                    else:
                        bot.api.send_document(
                            admin_chat_id,
                            f,
                            caption=f"–ß–µ–∫ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ #{payment.id}"
                        )
            except Exception as e:
                logger.error(f"Error sending receipt file to admin: {e}")
        
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω
        notification = payment.notification
        notification.admin_notified = True
        notification.save()
        
        logger.info(f"Admin notified about payment {payment.id}")
        
    except Exception as e:
        logger.error(f"Error sending admin notification: {e}")

def send_payment_result_to_user(bot: BotManager, payment: Payment, approved: bool):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if approved:
            message = (
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n"
                f"üìö –ö—É—Ä—Å: {payment.course.name}\n"
                f"üí∞ –°—É–º–º–∞: {payment.amount} —Ä—É–±\n\n"
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n\n"
                f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –∫—É—Ä—Å–∞:**\n"
                f"{payment.course.group_link}\n\n"
                f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            keyboard = KeyboardBuilder.inline_keyboard([
                [{'text': "üéì –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", 'callback_data': f"open_group_{payment.course.id}"}],
                [{'text': "üìö –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã", 'callback_data': "back_to_courses"}]
            ])
            keyboard = None
            
            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            payment.link_sent = True
            payment.save()
            
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = payment.notification
            notification.user_notified_approved = True
            notification.save()
            
        else:
            message = (
                f"‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n"
                f"üìö –ö—É—Ä—Å: {payment.course.name}\n"
                f"üí∞ –°—É–º–º–∞: {payment.amount} —Ä—É–±\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            )
            
            if payment.comment:
                message += f"üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n{payment.comment}\n\n"
            
            message += (
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑."
            )
            
            keyboard = KeyboardBuilder.inline_keyboard([
                [{'text': "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", 'callback_data': f"buy_{payment.course.id}"}],
                [{'text': "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", 'callback_data': "support"}]
            ])
            
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = payment.notification
            notification.user_notified_rejected = True
            notification.save()
        
        bot.send_message(payment.user.chat_id, message, keyboard, parse_mode='HTML')
        logger.info(f"Payment result sent to user {payment.user.chat_id}")
        
    except Exception as e:
        logger.error(f"Error sending payment result to user: {e}")
        

def handle_confirm_payment(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    ctx = MessageContext(bot, update)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "confirm_payment_123" –∏–ª–∏ "admin_approve_123"
        parts = ctx.callback_data.split('_')
        if len(parts) < 3:
            ctx.edit_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        payment_id = int(parts[-1])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ ID
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
        try:
            payment = Payment.objects.get(id=payment_id)
        except Payment.DoesNotExist:
            ctx.edit_message("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if payment.status != 'pending':
            status_text = payment.get_status_display()
            ctx.edit_message(
                f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}"
            )
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment.status = 'approved'
        payment.processed_at = timezone.now()
        payment.save()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = send_payment_result_to_user(bot, payment, approved=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        success_message = (
            f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user.full_name}\n"
            f"üì± @{payment.user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìö –ö—É—Ä—Å: {payment.course.name}\n"
            f"üí∞ –°—É–º–º–∞: {payment.amount} —Ä—É–±\n"
            f"üïê –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {payment.processed_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
        
        if success:
            success_message += "üì§ –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        else:
            success_message += "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        buttons = [
            [{'text': "üìÑ –û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ", 'callback_data': f"admin_open_{payment.id}"}],
            [{'text': "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 'callback_data': f"contact_user_{payment.user.chat_id}"}]
        ]
        
        keyboard = KeyboardBuilder.inline_keyboard(buttons)
        
        ctx.edit_message(success_message, keyboard, parse_mode='Markdown')
        
        logger.info(f"Payment {payment.id} approved by admin {ctx.chat_id}")
        
    except ValueError:
        ctx.edit_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.")
    except Exception as e:
        logger.error(f"Error confirming payment: {e}")
        ctx.edit_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")