# bot/bot_handlers.py

import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from django.conf import settings
from asgiref.sync import sync_to_async
from .models import TelegramUser, UserState
from courses.models import Course
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    START,
    WAITING_CONTACT,
    MAIN_MENU,
    COURSE_SELECTION,
    COURSE_DETAILS,
    PAYMENT_METHOD,
    WAITING_RECEIPT,
) = range(7)

class BotHandlers:
    """–ö–ª–∞—Å—Å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –±–æ—Ç–∞"""
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            chat_id = update.effective_chat.id
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            telegram_user, created = await sync_to_async(TelegramUser.objects.get_or_create)(
                chat_id=chat_id,
                defaults={
                    'username': user.username,
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                }
            )
            
            if created:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user}")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await sync_to_async(telegram_user.update_activity)()
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
            if not telegram_user.phone:
                await update.message.reply_text(
                    "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–æ–≤!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å.\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=get_contact_keyboard()
                )
                return WAITING_CONTACT
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                await show_main_menu(update, context)
                return MAIN_MENU
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start"
            )
            return ConversationHandler.END

    @staticmethod
    async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            contact = update.message.contact
            chat_id = update.effective_chat.id
            
            if contact and contact.user_id == update.effective_user.id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                telegram_user = await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)
                telegram_user.phone = contact.phone_number
                telegram_user.first_name = contact.first_name or telegram_user.first_name
                telegram_user.last_name = contact.last_name or telegram_user.last_name
                await sync_to_async(telegram_user.save)()
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {contact.phone_number}")
                
                await update.message.reply_text(
                    "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å:",
                    reply_markup=get_main_menu_keyboard()
                )
                
                await show_main_menu(update, context)
                return MAIN_MENU
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                    reply_markup=get_contact_keyboard()
                )
                return WAITING_CONTACT
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contact: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return WAITING_CONTACT

    @staticmethod
    async def show_courses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
            courses = await sync_to_async(list)(
                Course.objects.filter(is_active=True).order_by('order', 'name')
            )
            
            if not courses:
                await update.message.reply_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                button_text = f"üìö {course.name}"
                if course.discount_percentage > 0:
                    button_text += f" (-{course.discount_percentage}%)"
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"course_{course.id}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫—É–ø–∏—Ç—å:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return COURSE_SELECTION
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_courses: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU

    @staticmethod
    async def course_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞"""
        try:
            query = update.callback_query
            await query.answer()
            
            course_id = int(query.data.split('_')[1])
            course = await sync_to_async(Course.objects.get)(id=course_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ
            message = f"üìö **{course.name}**\n\n"
            message += f"{course.get_display_description()}\n\n"
            
            # –¶–µ–Ω–∞ –∏ —Å–∫–∏–¥–∫–∞
            if course.discount_percentage > 0:
                message += f"üí∞ –¶–µ–Ω–∞: ~~{course.old_price}~~ **{course.price} —Ä—É–±** "
                message += f"üî• **(-{course.discount_percentage}%)**\n\n"
            else:
                message += f"üí∞ –¶–µ–Ω–∞: **{course.price} —Ä—É–±**\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if course.max_students:
                current_students = course.current_students_count
                message += f"üë• –ú–µ—Å—Ç –∑–∞–Ω—è—Ç–æ: {current_students}/{course.max_students}\n"
                
                if not course.is_available:
                    message += "‚ùå **–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç**\n\n"
                else:
                    message += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {course.max_students - current_students}\n\n"
            
            # –ö–Ω–æ–ø–∫–∏
            keyboard = []
            
            if course.is_available:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {course.price} —Ä—É–±",
                        callback_data=f"buy_{course.id}"
                    )
                ])
            
            keyboard.extend([
                [InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", callback_data="back_to_courses")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫—É—Ä—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['selected_course_id'] = course_id
            
            return COURSE_DETAILS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ course_details: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ."
            )
            return COURSE_SELECTION

    @staticmethod
    async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            chat_id = update.effective_chat.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                telegram_user = await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)
                await sync_to_async(telegram_user.update_activity)()
            except TelegramUser.DoesNotExist:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                return await BotHandlers.start_command(update, context)
            
            if text == "üìö –ö—É—Ä—Å—ã":
                return await BotHandlers.show_courses(update, context)
            elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
                await update.message.reply_text(
                    "üìñ **–û –Ω–∞—Å**\n\n"
                    "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n\n"
                    "üéØ –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
                    "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
                    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
                    "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –≥—Ä—É–ø–ø–∞–º\n\n"
                    "üìû –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ @support",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
                return MAIN_MENU
            elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
                await update.message.reply_text(
                    "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n\n"
                    "üë®‚Äçüíª Telegram: @support\n"
                    "üìß Email: support@example.com\n"
                    "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 (–ú–°–ö)\n\n"
                    "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º!",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
                return MAIN_MENU
            else:
                await update.message.reply_text(
                    "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
                    reply_markup=get_main_menu_keyboard()
                )
                return MAIN_MENU
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_messages: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU

    @staticmethod
    async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            
            if data.startswith("course_"):
                return await BotHandlers.course_details(update, context)
            elif data.startswith("buy_"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
                await query.edit_message_text(
                    "üí≥ –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                    "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", callback_data="back_to_courses")
                    ]])
                )
                return COURSE_DETAILS
            elif data == "back_to_courses":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –∑–∞–Ω–æ–≤–æ
                courses = await sync_to_async(list)(
                    Course.objects.filter(is_active=True).order_by('order', 'name')
                )
                
                keyboard = []
                for course in courses:
                    button_text = f"üìö {course.name}"
                    if course.discount_percentage > 0:
                        button_text += f" (-{course.discount_percentage}%)"
                    
                    keyboard.append([
                        InlineKeyboardButton(button_text, callback_data=f"course_{course.id}")
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                ])
                
                await query.edit_message_text(
                    "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫—É–ø–∏—Ç—å:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return COURSE_SELECTION
            elif data == "back_to_menu":
                await query.delete_message()
                await show_main_menu_via_message(query.message, context)
                return MAIN_MENU
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return MAIN_MENU

    @staticmethod
    async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        await update.message.reply_text(
            "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await show_main_menu(update, context)
        return MAIN_MENU

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    keyboard = [
        [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_main_menu_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"""
    keyboard = [
        ["üìö –ö—É—Ä—Å—ã"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )

async def show_main_menu_via_message(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.reply_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode='Markdown'
    )

def get_conversation_handler():
    """–°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –±–æ—Ç–∞"""
    return ConversationHandler(
        entry_points=[CommandHandler('start', BotHandlers.start_command)],
        states={
            WAITING_CONTACT: [
                MessageHandler(filters.CONTACT, BotHandlers.handle_contact),
                MessageHandler(filters.TEXT & ~filters.COMMAND, 
                             lambda u, c: u.message.reply_text(
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                                 reply_markup=get_contact_keyboard()
                             ))
            ],
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, BotHandlers.handle_text_messages),
                CallbackQueryHandler(BotHandlers.handle_callback_query)
            ],
            COURSE_SELECTION: [
                CallbackQueryHandler(BotHandlers.handle_callback_query),
                MessageHandler(filters.TEXT & ~filters.COMMAND, BotHandlers.handle_text_messages)
            ],
            COURSE_DETAILS: [
                CallbackQueryHandler(BotHandlers.handle_callback_query),
                MessageHandler(filters.TEXT & ~filters.COMMAND, BotHandlers.handle_text_messages)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', BotHandlers.cancel_command),
            CommandHandler('start', BotHandlers.start_command)
        ],
        allow_reentry=True
    )

def setup_bot_application():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
    if not settings.TELEGRAM_BOT_TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(get_conversation_handler())
    
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    return application