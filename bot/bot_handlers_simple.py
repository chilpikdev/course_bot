# bot_handlers_simple.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (—Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π)

import logging
from django.utils import timezone
from bot.bot_manager import BotManager, BotStates, MessageContext, KeyboardBuilder
from bot.models import TelegramUser
from courses.models import Course
from bot.payment_handlers import (
    setup_payment_handlers, handle_photo_receipt, handle_document_receipt,
    send_payment_result_to_user
)

logger = logging.getLogger(__name__)

def setup_bot_handlers(bot: BotManager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    # –ö–æ–º–∞–Ω–¥—ã
    bot.add_command_handler('start', handle_start_command)
    bot.add_command_handler('cancel', handle_cancel_command)
    bot.add_command_handler('help', handle_help_command)
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏)
    bot.add_text_handler('üìö –ö—É—Ä—Å—ã', handle_courses_button)
    bot.add_text_handler('‚ÑπÔ∏è –û –Ω–∞—Å', handle_about_button)
    bot.add_text_handler('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', handle_support_button)
    
    # –ö–æ–Ω—Ç–∞–∫—Ç
    bot.set_contact_handler(handle_contact)
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.add_callback_handler('course_', handle_course_details)
    bot.add_callback_handler('back_to_courses', handle_back_to_courses)
    bot.add_callback_handler('back_to_menu', handle_back_to_menu)
    
    # –§–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    bot.set_photo_handler(handle_photo)
    bot.set_document_handler(handle_document)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    setup_payment_handlers(bot)
    
    logger.info("All bot handlers configured successfully")

def handle_start_command(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    ctx = MessageContext(bot, update)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user, created = TelegramUser.objects.get_or_create(
            chat_id=ctx.chat_id,
            defaults={
                'username': ctx.user.get('username'),
                'first_name': ctx.user.get('first_name', ''),
                'last_name': ctx.user.get('last_name', ''),
            }
        )
        
        if created:
            logger.info(f"New user created: {telegram_user}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            telegram_user.username = ctx.user.get('username') or telegram_user.username
            telegram_user.first_name = ctx.user.get('first_name', '') or telegram_user.first_name
            telegram_user.last_name = ctx.user.get('last_name', '') or telegram_user.last_name
            telegram_user.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        telegram_user.update_activity()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not telegram_user.phone:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            keyboard = KeyboardBuilder.reply_keyboard([
                ["üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"]
            ], one_time_keyboard=True)
            
            ctx.reply(
                "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–æ–≤!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å.\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=keyboard
            )
            ctx.set_state(BotStates.WAITING_CONTACT)
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(ctx)
            ctx.set_state(BotStates.MAIN_MENU)
    
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")

def handle_contact(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    ctx = MessageContext(bot, update)
    
    try:
        contact = ctx.message.get('contact')
        
        if contact and contact.get('user_id') == ctx.user.get('id'):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            telegram_user = TelegramUser.objects.get(chat_id=ctx.chat_id)
            telegram_user.phone = contact.get('phone_number')
            telegram_user.first_name = contact.get('first_name') or telegram_user.first_name
            telegram_user.last_name = contact.get('last_name') or telegram_user.last_name
            telegram_user.save()
            
            logger.info(f"Contact received from user {ctx.chat_id}: {contact.get('phone_number')}")
            
            ctx.reply(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å:"
            )
            
            show_main_menu(ctx)
            ctx.set_state(BotStates.MAIN_MENU)
        else:
            keyboard = KeyboardBuilder.reply_keyboard([
                ["üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"]
            ], one_time_keyboard=True)
            
            ctx.reply(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=keyboard
            )
    
    except Exception as e:
        logger.error(f"Error handling contact: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def handle_courses_button(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É—Ä—Å—ã'"""
    ctx = MessageContext(bot, update)
    show_courses_list(ctx)

def handle_about_button(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'"""
    ctx = MessageContext(bot, update)
    
    ctx.reply(
        "üìñ *–û –Ω–∞—Å*\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n\n"
        "üéØ –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –≥—Ä—É–ø–ø–∞–º\n\n"
        "üìû –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ @support",
        parse_mode='Markdown'
    )

def handle_support_button(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    ctx = MessageContext(bot, update)
    
    ctx.reply(
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n\n"
        "üë®‚Äçüíª Telegram: @support\n"
        "üìß Email: support@example.com\n"
        "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 21:00 (–ú–°–ö)\n\n"
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º!",
        parse_mode='Markdown'
    )

def handle_course_details(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞"""
    ctx = MessageContext(bot, update)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback_data
        course_id = int(ctx.callback_data.split('_')[1])
        course = Course.objects.get(id=course_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìö *{course.name}*\n\n"
        message += f"{course.get_display_description()}\n\n"
        
        # –¶–µ–Ω–∞ –∏ —Å–∫–∏–¥–∫–∞
        if course.discount_percentage > 0:
            message += f"üí∞ –¶–µ–Ω–∞: ~{course.old_price}~ *{course.price} —Ä—É–±* "
            message += f"üî• *(-{course.discount_percentage}%)*\n\n"
        else:
            message += f"üí∞ –¶–µ–Ω–∞: *{course.price} —Ä—É–±*\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if course.max_students:
            current_students = course.current_students_count
            message += f"üë• –ú–µ—Å—Ç –∑–∞–Ω—è—Ç–æ: {current_students}/{course.max_students}\n"
            
            if not course.is_available:
                message += "‚ùå *–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç*\n\n"
            else:
                message += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {course.max_students - current_students}\n\n"
        

        
        # –ö–Ω–æ–ø–∫–∏
        buttons = []
        
        if course.is_available:
            buttons.append([{
                'text': f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {course.price} —Ä—É–±",
                'callback_data': f"buy_{course.id}"
            }])
        
        buttons.extend([
            [{'text': "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", 'callback_data': "back_to_courses"}],
            [{'text': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'callback_data': "back_to_menu"}]
        ])
        
        keyboard = KeyboardBuilder.inline_keyboard(buttons)
        
        ctx.edit_message(message, keyboard)
        ctx.set_state(BotStates.COURSE_DETAILS)
        ctx.set_data('selected_course_id', course_id)
    
    except Exception as e:
        logger.error(f"Error showing course details: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ.")

def handle_back_to_courses(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤"""
    ctx = MessageContext(bot, update)
    show_courses_list(ctx, edit_message=True)

def handle_back_to_menu(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    ctx = MessageContext(bot, update)
    
    # –£–¥–∞–ª—è–µ–º inline —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.api.delete_message(ctx.chat_id, ctx.message['message_id'])
    except:
        pass
    
    show_main_menu(ctx)
    ctx.set_state(BotStates.MAIN_MENU)

def handle_cancel_command(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    ctx = MessageContext(bot, update)
    
    ctx.reply("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    show_main_menu(ctx)
    ctx.set_state(BotStates.MAIN_MENU)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
    ctx.user_data.pop('buying_course_id', None)
    ctx.user_data.pop('payment_method_id', None)

def handle_help_command(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    ctx = MessageContext(bot, update)
    
    ctx.reply(
        "ü§ñ *–ü–æ–º–æ—â—å*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
        "üìö *–ö–∞–∫ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ \"üìö –ö—É—Ä—Å—ã\"\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å\n"
        "3. –ù–∞–∂–º–∏—Ç–µ \"üí≥ –ö—É–ø–∏—Ç—å\"\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
        "5. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        "6. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
        "7. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        parse_mode='Markdown'
    )

def handle_photo(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    ctx = MessageContext(bot, update)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
    if ctx.user_state == BotStates.WAITING_RECEIPT:
        handle_photo_receipt(bot, update)
    else:
        ctx.reply(
            "üì∏ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞, "
            "—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ –Ω–∞–∂–º–∏—Ç–µ \"üí≥ –ö—É–ø–∏—Ç—å\"."
        )

def handle_document(bot: BotManager, update: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    ctx = MessageContext(bot, update)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞
    if ctx.user_state == BotStates.WAITING_RECEIPT:
        handle_document_receipt(bot, update)
    else:
        ctx.reply(
            "üìÑ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞, "
            "—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ –Ω–∞–∂–º–∏—Ç–µ \"üí≥ –ö—É–ø–∏—Ç—å\"."
        )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def show_main_menu(ctx: MessageContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = KeyboardBuilder.reply_keyboard([
        ["üìö –ö—É—Ä—Å—ã"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ])
    
    ctx.reply(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def show_courses_list(ctx: MessageContext, edit_message: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã
        courses = Course.objects.filter(is_active=True).order_by('order', 'name')
        
        if not courses:
            message = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if edit_message:
                ctx.edit_message(message)
            else:
                ctx.reply(message)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
        buttons = []
        for course in courses:
            button_text = f"üìö {course.name}"
            if course.discount_percentage > 0:
                button_text += f" (-{course.discount_percentage}%)"
            
            buttons.append([{
                'text': button_text,
                'callback_data': f"course_{course.id}"
            }])
        
        buttons.append([{
            'text': "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            'callback_data': "back_to_menu"
        }])
        
        keyboard = KeyboardBuilder.inline_keyboard(buttons)
        
        message = (
            "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫—É–ø–∏—Ç—å:"
        )
        
        if edit_message:
            ctx.edit_message(message, keyboard)
        else:
            ctx.reply(message, keyboard, parse_mode='Markdown')
        
        ctx.set_state(BotStates.COURSE_SELECTION)
    
    except Exception as e:
        logger.error(f"Error showing courses: {e}")
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤)

def handle_admin_approve_payment(bot: BotManager, payment_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        from payments.models import Payment
        payment = Payment.objects.get(id=payment_id)
        
        if payment.status == 'pending':
            payment.approve()
            send_payment_result_to_user(bot, payment, approved=True)
            logger.info(f"Payment {payment_id} approved by admin")
            return True
        return False
        
    except Exception as e:
        logger.error(f"Error approving payment {payment_id}: {e}")
        return False

def handle_admin_reject_payment(bot: BotManager, payment_id: int, reason: str = ""):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        from payments.models import Payment
        payment = Payment.objects.get(id=payment_id)
        
        if payment.status == 'pending':
            payment.reject(comment=reason)
            send_payment_result_to_user(bot, payment, approved=False)
            logger.info(f"Payment {payment_id} rejected by admin")
            return True
        return False
        
    except Exception as e:
        logger.error(f"Error rejecting payment {payment_id}: {e}")
        return False